import React, { useState, useEffect, useCallback } from 'react';
import './TastePreferencesPage.css';

const tg = window.Telegram.WebApp;

const allTastes = ['–õ—é–±–ª—é –æ—Å—Ç—Ä–æ–µ üå∂Ô∏è', '–ù–µ–Ω–∞–≤–∏–∂—É –ª—É–∫ üßÖ', '–ë–æ–ª—å—à–µ –æ–≤–æ—â–µ–π ü•¶', '–ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞', '–ú–µ–Ω—å—à–µ —Å–æ–ª–∏', '–ë–µ–∑ —Å–∞—Ö–∞—Ä–∞'];

function TastePreferencesPage({ onBack }) {
    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –¥–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∫—É—Å–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const [selectedTastes, setSelectedTastes] = useState(['–ë–æ–ª—å—à–µ –æ–≤–æ—â–µ–π ü•¶', '–ë–µ–∑ —Å–∞—Ö–∞—Ä–∞']);

    // –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    const handleSave = useCallback(() => {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ
        tg.MainButton.showProgress(); 
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, –∫–∞–∫ –±—É–¥—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        setTimeout(() => {
            tg.MainButton.hideProgress(); // –ü—Ä—è—á–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            tg.HapticFeedback.notificationOccurred('success'); // –î–∞–µ–º –≤–∏–±—Ä–æ–æ—Ç–∫–ª–∏–∫ –æ–± —É—Å–ø–µ—Ö–µ
            onBack(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è
        }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É
        
    }, [onBack]);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ Telegram –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    useEffect(() => {
        tg.BackButton.show();
        tg.BackButton.onClick(onBack);
        
        tg.MainButton.setText('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å');
        tg.MainButton.show();
        tg.MainButton.onClick(handleSave);
        
        // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        return () => {
            tg.BackButton.offClick(onBack);
            tg.MainButton.offClick(handleSave);
        }
    }, [onBack, handleSave]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –≤–∫—É—Å–∞
    const handleTasteClick = (taste) => {
        tg.HapticFeedback.impactOccurred('light');
        setSelectedTastes(prev => 
            prev.includes(taste) 
                ? prev.filter(t => t !== taste) // –£–±—Ä–∞—Ç—å, –µ—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω
                : [...prev, taste]               // –î–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω
        );
    };

    return (
        <div className="taste-page">
            <h1 className="taste-title">–í–∫—É—Å–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</h1>
            <p className="taste-subtitle">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –∏–ª–∏ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –ø–æ–¥–±–æ—Ä–∫–∏.</p>
            <div className="tastes-grid">
                {allTastes.map(taste => (
                    <button 
                        key={taste} 
                        className={`taste-tile ${selectedTastes.includes(taste) ? 'selected' : ''}`} 
                        onClick={() => handleTasteClick(taste)}
                    >
                        {taste}
                    </button>
                ))}
            </div>
        </div>
    );
}

export default TastePreferencesPage;
