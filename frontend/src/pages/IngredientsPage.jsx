// src/pages/IngredientsPage.jsx (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import { useState, useEffect, useCallback } from 'react';
import './IngredientsPage.css';

const tg = window.Telegram.WebApp;
const initialIngredients = ['–ö—É—Ä–∏—Ü–∞ üêî', '–†–∏—Å üçö', '–ü–æ–º–∏–¥–æ—Ä—ã üçÖ', '–°—ã—Ä üßÄ', '–õ—É–∫ üßÖ', '–ê–≤–æ–∫–∞–¥–æ ü•ë', '–ì–æ–≤—è–¥–∏–Ω–∞ ü•©', '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å ü•î', '–ú–æ—Ä–∫–æ–≤—å ü•ï', '–ì—Ä–∏–±—ã üçÑ', '–Ø–π—Ü–∞ ü•ö', '–ú—É–∫–∞', '–°–∞–ª–∞—Ç ü•¨', '–õ–æ—Å–æ—Å—å üêü', '–ú–∞–∫–∞—Ä–æ–Ω—ã üçù', '–û–≥—É—Ä–µ—Ü ü•í'];

function IngredientsPage({ onBack, onNext }) {
  const [allIngredients, setAllIngredients] = useState(initialIngredients);
  const [selected, setSelected] = useState([]);
  const [custom, setCustom] = useState('');

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–∞–ª—å—à–µ", –æ–±–µ—Ä–Ω—É—Ç –≤ useCallback –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  const handleNextClick = useCallback(() => {
    if (selected.length === 0) {
      tg.showAlert('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç!');
      return;
    }
    onNext(selected); // –ü–µ—Ä–µ–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
  }, [selected, onNext]);

  // –≠—Ç–æ—Ç useEffect –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –û–î–ò–ù –†–ê–ó –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    tg.BackButton.show();
    tg.BackButton.onClick(onBack);
    
    tg.MainButton.setText('–î–∞–ª—å—à–µ');
    tg.MainButton.show();
    
    return () => {
      tg.BackButton.offClick(onBack);
      tg.MainButton.offClick(handleNextClick); // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    };
  }, [onBack, handleNextClick]);
  
  // –≠—Ç–æ—Ç useEffect –ü–ï–†–ï–£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–¢ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è MainButton –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ selected
  useEffect(() => {
    tg.MainButton.onClick(handleNextClick);
  }, [handleNextClick]);


  const handleTileClick = (ingredient) => {
    tg.HapticFeedback.impactOccurred('light');
    setSelected(prev => 
      prev.includes(ingredient)
        ? prev.filter(item => item !== ingredient)
        : [...prev, ingredient]
    );
  };
  
  const handleAddCustom = () => {
    const newIngredient = custom.trim() + ' ‚úçÔ∏è';
    if (custom.trim() && !allIngredients.includes(newIngredient)) {
      setAllIngredients(prev => [newIngredient, ...prev]); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
      handleTileClick(newIngredient); // –°—Ä–∞–∑—É –≤—ã–±–∏—Ä–∞–µ–º –µ–≥–æ
      setCustom('');
    }
  };

  return (
    <div className="ingredients-page">
      <div className="progress-bar">
        <div className="progress-step active"></div>
        <div className="progress-step"></div>
        <div className="progress-step"></div>
      </div>
      <h1 className="ingredients-title">–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã</h1>
      
      <div className="search-bar">
        <input 
          type="text" 
          placeholder="–ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π..." 
          value={custom}
          onChange={(e) => setCustom(e.target.value)}
        />
        <button onClick={handleAddCustom}>–î–æ–±–∞–≤–∏—Ç—å</button>
      </div>

      <div className="ingredients-grid">
        {allIngredients.map(ing => (
          <button
            key={ing}
            className={`ingredient-tile ${selected.includes(ing) ? 'selected' : ''}`}
            onClick={() => handleTileClick(ing)}
          >
            {ing}
          </button>
        ))}
      </div>
    </div>
  );
}

export default IngredientsPage;